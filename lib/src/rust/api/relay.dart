// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `start_relay_async`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `fmt`

/// Initialize and start the relay
///
/// # Arguments
/// * `host` - IP address to bind (e.g. "127.0.0.1" or "0.0.0.0")
/// * `port` - Port number (e.g. 8081)
/// * `db_path` - Database path (reserved for future persistent storage)
Future<String> startRelay({
  required String host,
  required int port,
  required String dbPath,
}) => RustLib.instance.api.crateApiRelayStartRelay(
  host: host,
  port: port,
  dbPath: dbPath,
);

/// Stop the relay
Future<void> stopRelay() => RustLib.instance.api.crateApiRelayStopRelay();

/// Get relay URL (returns client-usable URL)
Future<String> getRelayUrl() => RustLib.instance.api.crateApiRelayGetRelayUrl();

/// Check if relay is running
Future<bool> isRelayRunning() =>
    RustLib.instance.api.crateApiRelayIsRelayRunning();

String relayStart({
  required String host,
  required int port,
  required String dbPath,
}) => RustLib.instance.api.crateApiRelayRelayStart(
  host: host,
  port: port,
  dbPath: dbPath,
);

void relayStop() => RustLib.instance.api.crateApiRelayRelayStop();

String relayGetUrl() => RustLib.instance.api.crateApiRelayRelayGetUrl();

bool relayIsRunning() => RustLib.instance.api.crateApiRelayRelayIsRunning();

/// Relay configuration
class RelayConfig {
  final String host;
  final int port;

  const RelayConfig({required this.host, required this.port});

  static Future<RelayConfig> default_() =>
      RustLib.instance.api.crateApiRelayRelayConfigDefault();

  @override
  int get hashCode => host.hashCode ^ port.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is RelayConfig &&
          runtimeType == other.runtimeType &&
          host == other.host &&
          port == other.port;
}
